#![feature(prelude_import)]
#![no_std]
#[prelude_import]
use std::prelude::v1::*;
#[macro_use]
extern crate std;
extern crate intercom;
use intercom::*;
use std::mem::MaybeUninit;

pub mod some {
    pub mod path {
        use std::mem::MaybeUninit;
        pub struct Type;
        pub const CLSID_Type: i8 = 0i8;
        pub(crate) fn get_intercom_coclass_info_for_Type() -> intercom::typelib::TypeInfo {
            unsafe { MaybeUninit::uninit().assume_init() }
        }
    }
}
pub struct SimpleType;
pub const CLSID_SimpleType: i8 = 0i8;

pub(crate) fn get_intercom_coclass_info_for_SimpleType() -> intercom::typelib::TypeInfo {
    unsafe { MaybeUninit::uninit().assume_init() }
}

#[no_mangle]
#[allow(non_snake_case)]
#[allow(dead_code)]
#[doc(hidden)]
pub unsafe extern "system" fn DllGetClassObject(
    rclsid: intercom::REFCLSID,
    riid: intercom::REFIID,
    pout: *mut intercom::RawComPtr,
) -> intercom::raw::HRESULT {
    let mut com_struct =
        intercom::ComBox::new(intercom::ClassFactory::new(rclsid, |clsid| match *clsid {
            self::some::path::CLSID_Type => {
                Ok(intercom::ComBoxData::new(some::path::Type::new()) as intercom::RawComPtr)
            }
            self::CLSID_SimpleType => {
                Ok(intercom::ComBoxData::new(SimpleType::new()) as intercom::RawComPtr)
            }
            intercom::alloc::CLSID_Allocator => Ok(intercom::ComBoxData::new(
                intercom::alloc::Allocator::default(),
            ) as intercom::RawComPtr),
            intercom::error::CLSID_ErrorStore => Ok(intercom::ComBoxData::new(
                intercom::error::ErrorStore::default(),
            ) as intercom::RawComPtr),
            _ => Err(intercom::raw::E_NOINTERFACE),
        }));
    intercom::ComBoxData::query_interface(com_struct.as_mut(), riid, pout);
    intercom::raw::S_OK
}
pub(crate) fn get_intercom_typelib() -> intercom::typelib::TypeLib {
    let types = <[_]>::into_vec(box [
        <intercom::alloc::Allocator as intercom::attributes::HasTypeInfo>::gather_type_info(),
        <intercom::error::ErrorStore as intercom::attributes::HasTypeInfo>::gather_type_info(),
        <some::path::Type as intercom::attributes::HasTypeInfo>::gather_type_info(),
        <SimpleType as intercom::attributes::HasTypeInfo>::gather_type_info(),
    ])
    .into_iter()
    .flatten()
    .collect::<Vec<_>>();
    intercom::typelib::TypeLib::__new(
        "TestLib".into(),
        intercom::GUID {
            data1: 0u32,
            data2: 0u16,
            data3: 0u16,
            data4: [0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8],
        },
        "1.0".into(),
        types,
    )
}
#[no_mangle]
pub unsafe extern "system" fn IntercomTypeLib(
    type_system: intercom::type_system::TypeSystemName,
    out: *mut intercom::RawComPtr,
) -> intercom::raw::HRESULT {
    let mut tlib = intercom::ComBox::new(get_intercom_typelib());
    let rc = intercom::ComRc::<intercom::typelib::IIntercomTypeLib>::from(&tlib);
    let itf = intercom::ComRc::detach(rc);
    *out = match type_system {
        intercom::type_system::TypeSystemName::Automation => {
            intercom::ComItf::ptr::<intercom::type_system::AutomationTypeSystem>(&itf).ptr
        }
        intercom::type_system::TypeSystemName::Raw => {
            intercom::ComItf::ptr::<intercom::type_system::RawTypeSystem>(&itf).ptr
        }
    };
    intercom::raw::S_OK
}
#[no_mangle]
#[allow(non_snake_case)]
#[allow(dead_code)]
#[doc(hidden)]
pub unsafe extern "system" fn IntercomListClassObjects(
    pcount: *mut usize,
    pclsids: *mut *const intercom::CLSID,
) -> intercom::raw::HRESULT {
    if pcount.is_null() {
        return intercom::raw::E_POINTER;
    }
    if pclsids.is_null() {
        return intercom::raw::E_POINTER;
    }
    static AVAILABLE_CLASSES: [::intercom::CLSID; 4usize] = [
        some::path::CLSID_Type,
        CLSID_SimpleType,
        intercom::alloc::CLSID_Allocator,
        intercom::error::CLSID_ErrorStore,
    ];
    *pcount = 4usize;
    *pclsids = AVAILABLE_CLASSES.as_ptr();
    intercom::raw::S_OK
}
