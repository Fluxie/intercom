project (multi_lib)
include(ExternalProject)

# Determine the name of the binary.
# The binary is generated by Rust compiler so we cannot simply deduce it automatically.
set(MULTILIB_BINARY_BUILD_NAME "${CMAKE_SHARED_LIBRARY_PREFIX}multi_lib${CMAKE_SHARED_LIBRARY_SUFFIX}")

set(MULTILIB_WORKSPACE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/..")

# Determine the parameters based on the build type.
if("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    set(MULTILIB_BINARY_BUILD_DIRECTORY "${MULTILIB_WORKSPACE_DIR}/target/release")
    set(MULTILIB_BUILD_ARGUMENT_RELEASE "--release")
else()
    set(MULTILIB_BINARY_BUILD_DIRECTORY "${MULTILIB_WORKSPACE_DIR}/target/debug")
    set(MULTILIB_BUILD_ARGUMENT_RELEASE "")
endif()
set(MULTILIB_BINARY_BUILD_PATH "${MULTILIB_BINARY_BUILD_DIRECTORY}/${MULTILIB_BINARY_BUILD_NAME}")
set(MULTILIB_IMPORT_BUILD_PATH "${MULTILIB_BINARY_BUILD_PATH}.lib")

set(MULTILIB_LOCATION "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${MULTILIB_BINARY_BUILD_NAME}")
set(MULTILIB_IMPORT_LOCATION "${MULTILIB_LOCATION}.lib")

# Build instructions for the library.
file(GLOB MULTILIB_SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/src)
add_custom_command(
        OUTPUT ${MULTILIB_BINARY_BUILD_PATH}
        COMMAND "cargo" ARGS "build" ${MULTILIB_BUILD_ARGUMENT_RELEASE}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        DEPENDS ${MULTILIB_SOURCES}
)

# On Windows the DLLs are linked with the help of an import library.
# Carge sets the name of the import library to "<library>.dll.lib".
if( WIN32 )

        # Import library is required.
        add_custom_target(multilib DEPENDS ${MULTILIB_BINARY_BUILD_PATH} ${MULTILIB_IMPORT_BUILD_PATH})

        add_custom_command(
                TARGET multilib POST_BUILD
                COMMAND cargo run embed-typelib ${MULTILIB_BINARY_BUILD_PATH}
                WORKING_DIRECTORY ${MULTILIB_WORKSPACE_DIR}/../intercom-cli
        )

else()

        # No need to depend on the import library.
        add_custom_target(multilib DEPENDS ${MULTILIB_BINARY_BUILD_PATH})

endif()

add_custom_command(
        TARGET multilib POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy ${MULTILIB_BINARY_BUILD_PATH} ${MULTILIB_LOCATION}
        DEPENDS ${MULTILIB_BINARY_BUILD_PATH} )

# Publish as a library.
add_library(multi_lib SHARED IMPORTED GLOBAL)
add_dependencies(multi_lib multilib)
set_target_properties(multi_lib PROPERTIES IMPORTED_LOCATION "${MULTILIB_BINARY_BUILD_PATH}")
set_target_properties(multi_lib PROPERTIES IMPORTED_IMPLIB "${MULTILIB_IMPORT_BUILD_PATH}")

# Unfortunately Rust has a poor support for "soname".
# See the following discussions
# - https://github.com/rust-lang/rust/issues/37529
# - https://github.com/rust-lang/cargo/issues/5045
#
# Without this the NEEDED path in the binaries that link to this library are wrong.
# Even if the CMAKE_RUNTIME_OUTPUT_DIRECTORY is set to a custom directory the
# NEEDED path to this library within the executable is still set as if the compiled exectubale
# was located in the default target. e.g. CMAKE_BINARY_DIR/test/<executable>/
# Example:
# - Wrong relative path: "../../bin/lib/libtest_lib.so => not found"
# - Should have been: "./lib/libtest_lib.so"
#
# CMake: IMPORTED_NO_SONAME: Specifies that an IMPORTED shared library target has no "soname".
# Set this property to true for an imported shared library file that has no "soname" field.
# CMake may adjust generated link commands for some platforms to prevent the linker
# from using the path to the library in place of its missing soname. Ignored for non-imported targets.
set_target_properties(multi_lib PROPERTIES IMPORTED_NO_SONAME TRUE)
